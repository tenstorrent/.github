name: Update Project Cards

# Trigger the workflow daily at midnight
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: # Allow manual trigger for testing

jobs:
  update-cards:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          npm install axios dotenv

      # Step 4: Run the Node.js script to update project cards
      - name: Update project cards
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub Personal Access Token stored in secrets
          PROJECT_ID: ${{ secrets.PROJECT_ID }}      # Project ID stored in secrets
        run: |
          node -e "
          require('dotenv').config();
          const axios = require('axios');

          const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
          const PROJECT_ID = process.env.PROJECT_ID;

          if (!GITHUB_TOKEN || !PROJECT_ID) {
            console.error('Error: GITHUB_TOKEN and PROJECT_ID must be set as environment variables.');
            process.exit(1);
          }

          const headers = {
            Authorization: \`Bearer \${GITHUB_TOKEN}\`,
            Accept: 'application/vnd.github.v3+json',
          };

          async function getProjectColumns(projectId) {
            const response = await axios.get(\`https://api.github.com/projects/\${projectId}/columns\`, { headers });
            return response.data;
          }

          async function getColumnCards(columnId) {
            const response = await axios.get(\`https://api.github.com/projects/columns/\${columnId}/cards\`, { headers });
            return response.data;
          }

          async function getIssueDetails(issueUrl) {
            const response = await axios.get(issueUrl, { headers });
            return response.data;
          }

          async function moveCard(cardId, newColumnId) {
            await axios.post(
              \`https://api.github.com/projects/columns/cards/\${cardId}/moves\`,
              { position: 'top', column_id: newColumnId },
              { headers }
            );
          }

          async function updateProjectCards(projectId) {
            const columns = await getProjectColumns(projectId);
            const columnMap = {};
            columns.forEach(column => columnMap[column.name] = column.id);

            for (const column of columns) {
              const cards = await getColumnCards(column.id);

              for (const card of cards) {
                if (!card.content_url) continue; // Skip note cards

                const issue = await getIssueDetails(card.content_url);
                let targetColumnId = null;

                for (const label of issue.labels) {
                  if (columnMap[label.name]) {
                    targetColumnId = columnMap[label.name];
                    break;
                  }
                }

                if (targetColumnId && targetColumnId !== column.id) {
                  await moveCard(card.id, targetColumnId);
                  console.log(\`Moved card \${card.id} (Issue #\${issue.number}) to column \${targetColumnId}.\`);
                }
              }
            }
          }

          updateProjectCards(PROJECT_ID)
            .then(() => console.log('Project cards updated successfully.'))
            .catch(error => console.error('Error updating project cards:', error.response?.data || error.message));
          "

